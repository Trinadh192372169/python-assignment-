import requests

def fetch_traffic_data(api_key, origin, destination):
    """
    Fetches real-time traffic data from TomTom Traffic API.
    
    Args:
    - api_key (str): Your TomTom API key.
    - origin (str): Starting point (address or coordinates).
    - destination (str): Destination point (address or coordinates).

    Returns:
    - dict: Traffic data as a dictionary.
    """
    base_url = 'https://api.tomtom.com/routing/1/calculateRoute/{origin}:{destination}/json'

    params = {
        'key': api_key,
        'computeBestOrder': 'true',
        'traffic': 'true',
        'travelMode': 'car',
        'language': 'en-GB',
        'instructionFormat': 'text'
    }

    try:
        response = requests.get(base_url.format(origin=origin, destination=destination), params=params)
        response.raise_for_status()  # Raise exception for bad responses
        traffic_data = response.json()  # Parsing JSON response
        return traffic_data
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data: {e}")
        return None

def display_traffic_data(traffic_data):
    """
    Displays traffic data to the user.
    
    Args:
    - traffic_data (dict): Traffic data dictionary from TomTom Traffic API.
    """
    if traffic_data is None or 'routes' not in traffic_data:
        print("Failed to fetch traffic data.")
        return
    
    route = traffic_data['routes'][0]  # Assuming first route is the best one

    print(f"Route from {route['summary']['startPoint']} to {route['summary']['endPoint']}:")
    print(f"Total Distance: {route['summary']['lengthInMeters'] / 1000} km")  # Convert to km
    print(f"Total Travel Time: {route['summary']['travelTimeInSeconds'] / 60} minutes")  # Convert to minutes

    print("\nTraffic Conditions:")
    for section in route['sections']:
        print(f"- {section['summary']['lengthInMeters'] / 1000} km, {section['summary']['trafficTimeInSeconds'] / 60} minutes")

    if 'warnings' in route:
        print("\nWarnings:")
        for warning in route['warnings']:
            print(f"- {warning['warningMessage']}")

if __name__ == '__main__':
    api_key = 'IAE2fYh73Z5GbhfHzAwD304B3M6fuqg2'
    origin = input("Enter starting point (address or coordinates): ")
    destination = input("Enter destination (address or coordinates): ")

    traffic_data = fetch_traffic_data(api_key, origin, destination)
    if traffic_data:
        display_traffic_data(traffic_data)

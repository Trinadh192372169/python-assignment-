# Define the structure of the inventory system
class Product:
    def __init__(self, product_id, name, price, stock_level):
        self.product_id = product_id
        self.name = name
        self.price = price
        self.stock_level = stock_level

class Warehouse:
    def __init__(self, warehouse_id, location, products):
        self.warehouse_id = warehouse_id
        self.location = location
        self.products = products

# Initialize products and warehouses
product1 = Product(1, 'Product A', 10.99, 100)
product2 = Product(2, 'Product B', 5.99, 50)

warehouse1 = Warehouse(1, 'Location X', [product1])
warehouse2 = Warehouse(2, 'Location Y', [product2])

# Implement inventory tracking application
def track_inventory(product_id, quantity):
    for warehouse in [warehouse1, warehouse2]:
        for product in warehouse.products:
            if product.product_id == product_id:
                if product.stock_level - quantity < 0:
                    print(f"Alert: Stock level for {product.name} in {warehouse.location} is below threshold!")
                else:
                    product.stock_level -= quantity

# Optimize inventory ordering
def calculate_reorder_point(product_id, lead_time, demand_forecast):
    # Algorithm implementation to calculate reorder point based on historical data
    pass

# Generate reports
def generate_reports():
    # Report generation on inventory turnover rates, stockout occurrences, and cost implications
    pass

# User interaction
def user_interaction(product_id):
    for warehouse in [warehouse1, warehouse2]:
        for product in warehouse.products:
            if product.product_id == product_id:
                print(f"Product: {product.name}\nStock Level: {product.stock_level}")

# Example usage
track_inventory(1, 20)
user_interaction(1)

Output:
Product: Product A
Stock Level: 80
